##### BFS ######

library(igraph)
library(stringr)
bfs<-function(start,goal){
  open<-c()
  closed<-c()
  i<-1
  j<-1
  open[1]<-start
  while(!is.null(open[1])){
    n<-open[1]
    print(n)
    if(n==goal){
      closed[j]<-n
      open=open[-1]
      print(open)
      break
    }
    closed[j]<-open[i]
    j<-j+1
    neighbor=c()
    k<-1
    len<-length(adjList[open[i]][[1]])
    for(val in 1:len){
      neighbor[k]<-adjList[open[i]][[1]][val]
      k<-k+1
    }
    cat("Neighbors of  ",open[i],"are ",neighbor,"\n")
    neighbor<-neighbor[!neighbor %in% open]
    neighbor<-neighbor[!neighbor %in% closed]
    open<-open[-1]
    open<-append(open,neighbor)
    print(open)
    
  }
  return(closed)
}
adjList<-list(c('A', 'B'),
              c('C', 'D'),
              c('E', 'F'),
              'A',
              'A',
              c('H', 'G'),
              'B',
              'E',
              'E')
names(adjList)<-c('S',
                  'A',
                  'B',
                  'C',
                  'D',
                  'E',
                  'F',
                  'H',
                  'G')
graph<-stack(adjList)
#plot(g,directed=FALSE)
visited<-bfs('S','G')
print(visited)
temp<-as.data.frame(graph)
x<-paste(temp$values,temp$ind,sep=",")
temp$y = unname(sapply(x, function(x) {
  paste(sort(str_trim(strsplit(x[1], ',')[[1]])), collapse=',')} ))
temp<-temp[!duplicated(temp$y), ]
temp<-temp[,-3]
temp<-graph.data.frame(temp,directed=FALSE)
V(temp)$color<-"pink"
for(i in 1:length(visited)){
  V(temp)[visited[i]]$color<-"green"
}
V(temp)["S"]$color<-"red"
V(temp)["G"]$color<-"red"
plot(temp)

########## DFS #######

library(igraph)
library(stringr)
adjList<-list(c('A', 'B'),
              c('C', 'D'),
              c('E', 'F'),
              'A',
              'A',
              c('H', 'G'),
              'B',
              'E',
              'E')
names(adjList)<-c('S',
                  'A',
                  'B',
                  'C',
                  'D',
                  'E',
                  'F',
                  'H',
                  'G')
graph<-stack(adjList)
#plot(g,directed=FALSE)
temp<-as.data.frame(graph)
x<-paste(temp$values,temp$ind,sep=",")
temp$y = unname(sapply(x, function(x) {
  paste(sort(str_trim(strsplit(x[1], ',')[[1]])), collapse=',')} ))
temp<-temp[!duplicated(temp$y), ]
print(temp)
temp<-temp[,-3]
print(temp)
dfs<-function(start,goal){
  open<-c()
  closed<-c()
  i<-1
  j<-1
  open[1]<-start
  while(!is.null(open[1])){
    n<-open[1]
    print(n)
    if(n==goal){
      closed[j]<-n
      open=open[-1]
      break
    }
    closed[j]<-open[i]
    V(temp)[open[i]]$color<-"red"
    j<-j+1
    count<-0
    neighbor=c()
    k<-1
    len<-length(adjList[open[i]][[1]])
    for(val in 1:len){
      neighbor[k]<-adjList[open[i]][[1]][val]
      k<-k+1
    }
    cat("Neighbors of  ",open[i],"are ",neighbor,"\n")
    neighbor<-neighbor[!neighbor %in% open]
    neighbor<-neighbor[!neighbor %in% closed]
    open<-append(neighbor,open)
    open<-open[-(length(neighbor)+1)]
  }
  return(closed)
}
temp<-graph.data.frame(temp,directed=FALSE)
k1<-dfs('S','G')
print(k1)
for(i in 1:length(k1))
{
  V(temp)[k1[i]]$color<-"green"
}
V(temp)["S"]$color<-"red"
V(temp)["G"]$color<-"red"
plot(temp)

############# IDS ########

#install.packages("igraph")
library("igraph")
graph_1 <- graph( edges=c('A','S','A','T','A','Z','S','F','S','R','S','O','T','L','Z','O','F','B','R','P','R','C','L','M','B','G','B','U','P','B','C','P','M','D','U','H','D','C','H','E','H','V','V','I','I','N'), directed=F)


goal <- V(graph_1)['S']
start <- V(graph_1)['N']
get_adj_vertices <- function(graph, node,goal,max_depth,current_depth){
  
  if(goal==node)
    return(1)
  
  if(current_depth==max_depth)
  {
    
    return(0)
  }
  
  adjacent_vertices_list = adjacent_vertices(graph,node)
  tmp <- get('visited',.GlobalEnv)
  tmp[[length(visited)+1]] <- node
  assign("visited",tmp, .GlobalEnv)
  
  for(i in seq(1,length(adjacent_vertices_list[[1]]),by=1)){
    if(goal == adjacent_vertices_list[[1]][i]){
      return(1)
    }
    if(!(adjacent_vertices_list[[1]][i] %in% visited)){
      
      goal_reach_flag = get_adj_vertices(graph,adjacent_vertices_list[[1]][i],goal,max_depth,current_depth +1)
      if(goal_reach_flag == 1)
      {
        return(1)
      }
    }
  }
  
  return(0)
}



i=0
while(length(visited)<=gorder(graph_1)){
  #for(i in 0:3){
  visited <- list()
  goal_flag =get_adj_vertices(graph_1,start,goal,i,0)
  i=i+1
  if(goal_flag == 1)
  {
    break
  }
  
  visited[[length(visited)+1]] <- goal
  V(graph_1)[unlist(visited)]$color="pink"
  V(graph_1)[start]$color="green"
  V(graph_1)[goal]$color="yellow"
  plot(graph_1)
  Sys.sleep(2)
}
#dfs(graph_1,V(graph_1)['N'])


############ GA #############

fitness<-function(chromosome,range,chromosome_length){
  value<-strtoi(chromosome,base = 2)
  value<-range[1]+((range[2]-range[1])/(2**chromosome_length-1))*value
  return(value**2)
}
length_chromosome<-6
no_of_chromosome<-8
no_of_variable<-1
range<-c(0,20)
#random chromosome generation
X<-rbinom(no_of_chromosome*length_chromosome,1,0.5)
X<-as.character(X[1:length_of_random_number])
length_of_random_number<-no_of_chromosome*length_chromosome #length of x
chromosomes<-c()
i<-1
index<-1
while(i<no_of_chromosome*length_chromosome){
  from<-i
  to<-i+length_chromosome-1
  chromosomes[index]<-paste(X[from:to],collapse = '')
  i<-i+length_chromosome
  index<-index+1
}
co_prob<-0.65
mu_prob<-0.05
no_of_iteration<-5
chromosome_fitness<-c()
probability<-c()
cum_prob<-c()
selected_chromosomes<-c()
intermediate_chromosomes<-c()
final_offsprings<-c()
mutation_sites<-c(1,4,2,1,3,5,2,4)
crossover_sites<-c(2,4,1,3)
for(iteration in 1:no_of_iteration){
  #fitness
  for(index in 1:no_of_chromosome){
    chromosome_fitness[index]<-fitness(chromosomes[index],range,length_chromosome)
  }
  #fitness probability
  sum_fitness<-sum(chromosome_fitness)
  print("average fitness")
  print(sum_fitness/no_of_chromosome)
  for(index in 1:no_of_chromosome){
    probability[index]<-chromosome_fitness[index]/sum_fitness
  }
  #cummulative probability
  cum_prob[1]<-probability[1]
  for(index in 2:no_of_chromosome){
    cum_prob[index]<-probability[index]+cum_prob[index-1]
  }
  #selection(Roulette wheel)
  for(index in 1:no_of_chromosome){
    random_no<-runif(1)
    for(cum_index in 1:no_of_chromosome){
      if(cum_prob[cum_index]>random_no){
        selected_chromosomes[index]<-chromosomes[cum_index]
        break
      }
    }
  }
  #cross-over
  index<-1
  crossover_site_index<-1
  while(index<no_of_chromosome){
    random_no<-runif(1)
    if(random_no<co_prob){
      co_site<-crossover_sites[crossover_site_index]
      c1<-paste(substr(selected_chromosomes[index],1,co_site),
                substr(selected_chromosomes[index+1],co_site+1,length_chromosome),sep = '')
      c2<-paste(substr(selected_chromosomes[index+1],1,co_site),
                substr(selected_chromosomes[index],co_site+1,length_chromosome),sep = '')
      intermediate_chromosomes[index]<-c1
      intermediate_chromosomes[index+1]<-c2
    }else{
      intermediate_chromosomes[index]<-selected_chromosomes[index]
      intermediate_chromosomes[index+1]<-selected_chromosomes[index+1]
    }
    index<-index+2
    crossover_site_index<-crossover_site_index+1
  }
  #mutation
  for(index in 1:no_of_chromosome){
    final_offsprings[index]<-intermediate_chromosomes[index]
    random_no<-runif(1)
    if(random_no<mu_prob){
      mu_site<-mutation_sites[index]
      mu_value<-substr(final_offsprings[index],mu_site,mu_site)
      if(mu_value=="1"){
        substr(final_offsprings[index],mu_site,mu_site)<-"0"
      }else{
        substr(final_offsprings[index],mu_site,mu_site)<-"1"
      }
    }
  }
  print("iteration")
  print(iteration)
  print(chromosomes)
  chromosomes<-final_offsprings
  print(selected_chromosomes)
  print(intermediate_chromosomes)
  print(final_offsprings)
}
for(index in 1:no_of_chromosome){
  chromosome_fitness[index]<-fitness(chromosomes[index],range,length_chromosome)
}
sum<-sum(chromosome_fitness)
print(sum/no_of_chromosome)

########## PSO ###########

fun <- function(x){
  return(1 + 2 * x - x * x)
}

inertia = .9
coeffLb = 2
coeffGb = 2
n = 100

randVar1 = runif(n,-5,5)
randVar2 = runif(n,-5,5)

globalBestFitness = -9999
currentPosition = runif(n,-5,5)
velocity = runif(n,-.5,.5)

iter = 200

currentFitness = fun(currentPosition)
localBestPosition = currentPosition
localBestFitness = currentFitness

for (inertia in seq(.9,.4,-(.9-.4)/iter)) {
  max = max(currentFitness)
  ind = which(currentFitness == max)[1]
  
  if(max > globalBestFitness){
    globalBestFitness = max
    gbp = currentPosition[ind]
  }
  
  velocity = inertia * velocity + randVar1 * coeffLb * (currentPosition - localBestPosition) + randVar2 * coeffGb * (currentPosition - gbp)
  currentPosition = currentPosition + velocity 
  
  currentFitness = fun(currentPosition)
  i = 1
  for (f in currentFitness) {
    
    if(f > localBestFitness[i]){
      localBestFitness[i] = f
      localBestPosition[i] = currentPosition[i]
    }
    i = i + 1
    
  }
}
print(globalBestFitness)

########### PSO_g ##########

fitness<-function(operands){
  particle_fitness<-1/(1+abs(50-sum(operands)))
  return(particle_fitness)
}

particles<-list()
no_of_particles<-20
for(index in 1:no_of_particles){
  particles[[index]]<-runif(10,min = -500,max = 500)
}
velocity<-list()
for(index in 1:no_of_particles){
  random_velocity<-runif(1,min = -1,max = 1)
  velocity[[index]]<-rep(random_velocity,10)
}


no_of_iteration<-4

w<-0.70
c1<-0.20
c2<-0.60
particle_best<-list()
particle_best_fitness<-c()
particle_best<-particles
particles_Sum<-c()
par(mfrow=c(1,2))
for(index in 1:no_of_particles){
  particles_Sum[index]<-sum(particles[[index]])
}

plot(particles_Sum,type="p")

for(iteration in 1:no_of_iteration){
  particle_fitness<-c()
  for(index in 1:no_of_particles){
    particle_fitness[index]<-fitness(particles[[index]])
    if(iteration == 1){
      particle_best[[index]]<-particles[[index]]
      particle_best_fitness[index]<-particle_fitness[index]
      next
    }
    if(particle_fitness[index]>particle_best_fitness[index]){
      particle_best[[index]]<-particles[[index]]
      particle_best_fitness[index]<-particle_fitness[index]
    }
    
  }
  gbest_position<-which.max(particle_fitness)
  new_velocity<-list()
  for(index in 1:no_of_particles){
    r1<-runif(1)
    r2<-runif(1)
    velocity[[index]]<-velocity[[index]]*w+c1*r1*(particle_best[[index]]-particles[[index]])+c2*r2*(particles[[gbest_position]]-particles[[index]])
    particles[[index]]<-particles[[index]]+velocity[[index]]
  }
}
for(index in 1:no_of_particles){
  particles_Sum[index]<-sum(particles[[index]])
}

plot(particles_Sum,type="p")

############ Greedy_Best #####

library(igraph)
#node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
#names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')

#graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
#E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

node_heuristic<-c(223,222,166,192,165,136,122,111,100,60,32,102,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M')

graph_1<-graph(edges = c('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','I','J','K','K','M','G','H','I','H'),directed = F)

start_node<-'A'
goal<-'M'

V(graph_1)$color<-"white"
E(graph_1)$color<-"black"

open<-c()
open[start_node]<-node_heuristic[start_node]
closed<-c()
path<-c()
flag<-FALSE
while(TRUE){
  if(length(open)==0){
    break
  }
  n<-names(open)[1]
  if(n==goal){
    path<-c(path,n)
    flag<-TRUE
    break
  }
  closed<-c(closed,open[1])
  open<-open[-1]
  adj<-adjacent_vertices(graph_1,n)
  for(i in 1:length(adj[[1]])){
    if(adj[[1]][i]$name %in% names(open) || adj[[1]][i]$name %in% names(closed)){
      next
    }
    open[adj[[1]][i]$name]<-node_heuristic[adj[[1]][i]$name]
  }
  ordered_open<-order(as.numeric(open))
  open<-open[ordered_open]
  print(closed)
  path<-c(path,n)
}

plot(graph_1)


if(flag){
  print(path)
}else{
  print("path not found")
}

########### Hill ######### 

library(igraph)
node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')

graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

start_node<-'A'
goal<-'R'
path<-c(start_node)
n<-start_node
flag<-FALSE
while(TRUE){
  if(n==goal){
    flag<-TRUE
    break
  }
  adj<-adjacent_vertices(graph_1,n)
  min_cost_child<-adj[[1]][1]$name
  for(i in 2:length(adj[[1]])){
    if(node_heuristic[min_cost_child]>node_heuristic[adj[[1]][i]$name]){
      min_cost_child<-adj[[1]][i]$name
    }
  }
  if(node_heuristic[n]<node_heuristic[min_cost_child]){
    flag<-FALSE
    break
  }
  n<-min_cost_child
  path<-c(path,n)
}
if(flag){
  print(path)
} else{
  print("stopped at local maxima")
  print(path)
}

ordered_list<-order(as.numeric(node_heuristic))
node_heuristic<-node_heuristic[ordered_list]
print(node_heuristic)
typeof(node_heuristic)

#print(node_heuristic)
#node_heuristic<-node_heuristic[names(node_heuristic)!='A']
#print(node_heuristic)


########## A Algo ###########

library(igraph)
# node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
# names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')
# 
# graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
# E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

node_heuristic<-c(223,222,166,192,165,136,122,111,100,60,32,102,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M')

graph_1<-graph(edges = c('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','I','J','K','K','M','G','H','I','H'), directed = F)
E(graph_1)$weight<-c(36,61,31,32,31,80,52,122,112,102,43,45,36,32,30,40)

start_node<-'A'
goal<-'M'

plot(graph_1)

V(graph_1)$color<-"white"
E(graph_1)$color<-"black"

open<-c()
open[start_node]<-node_heuristic[start_node]
closed<-c()
path<-c()
cost<-c()
link<-c()
cost[start_node]<-0
print(cost[start_node])
flag<-FALSE
while(TRUE){
  if(length(open)==0){
    break
  }
  n<-names(open)[1]
  if(n==goal){
    path<-c(path,n)
    flag<-TRUE
    break
  }
  closed<-c(closed,open[1])
  open<-open[-1]
  adj<-adjacent_vertices(graph_1,n)
  for(i in 1:length(adj[[1]])){
    ei<-get.edge.ids(graph_1,c(n,adj[[1]][i]$name))
    cost_of_edge<-E(graph_1)[ei]$weight
    cost_of_node<-cost[n]+cost_of_edge
    total_node_heuristic<-node_heuristic[adj[[1]][i]$name]+cost_of_node
    if(adj[[1]][i]$name %in% names(open)){
      if(open[adj[[1]][i]$name]>total_node_heuristic){
        open[adj[[1]][i]$name]<-total_node_heuristic
        cost[adj[[1]][i]$name]<-cost_of_node
        link[adj[[1]][i]$name]<-n
      }
      next
    }
    if(adj[[1]][i]$name %in% names(closed)){
      if(closed[adj[[1]][i]$name]>total_node_heuristic){
        open[adj[[1]][i]$name]<-total_node_heuristic
        cost[adj[[1]][i]$name]<-cost_of_node
        link[adj[[1]][i]$name]<-n
      }
      next
    }
    open[adj[[1]][i]$name]<-node_heuristic[adj[[1]][i]$name]+cost_of_node
    cost[adj[[1]][i]$name]<-cost_of_node
    link[adj[[1]][i]$name]<-n
  }
  ordered_open<-order(as.numeric(open))
  open<-open[ordered_open]
  print(open)
  path<-c(path,n)
}
for(i in 2:length(path)){
  ei <- get.edge.ids(graph_1, c(path[i],link[path[i]]))
  E(graph_1)[ei]$color<-'orange'
}
plot(graph_1)
print(cost[goal])
if(flag){
  print(path)
}else{
  print("path not found")
}

######################################
